using System.Security.Cryptography.X509Certificates;
using System.Windows.Forms;

// Written by Evelyn Dawson (BlackLightEve).
// For the purpose of moving files whose names are contained within a text file generated by After Effects to a new location.
// 6/16/2023

namespace AEMoveSourceFiles
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }


        // Click event handler to select a text file location.
        private void SelectReportBT_Click(object sender, EventArgs e)
        {
                OpenFileDialog file = new OpenFileDialog();
                file.ShowDialog();
                selectReportTB.Text = file.FileName;
        }


        // Click event handler to select a folder location.
        private void SelectDestinationBT_Click(object sender, EventArgs e)
        {
                FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
                folderBrowserDialog.ShowDialog();
                selectDestinationTB.Text = folderBrowserDialog.SelectedPath;
        }


        // Simple way to lock and unlock every control.
        private void LockControls()
        {
            MoveFilesBT.Enabled = false;
            selectDestinationTB.Enabled = false;
            selectDestinationBT.Enabled = false;
            selectReportTB.Enabled = false;
            selectReportBT.Enabled = false;
        }


        private void UnlockControls()
        {
            MoveFilesBT.Enabled = true;
            selectDestinationTB.Enabled = true;
            selectDestinationBT.Enabled = true;
            selectReportTB.Enabled = true;
            selectReportBT.Enabled = true;
        }


        // Check if the drive letter is to be skipped.
        private bool EvaluateFile(char compareTo, string[] multipleDirectories)
        {
            if (multipleDirectories.Count() == 0 || multipleDirectories[0] == "N/A" || multipleDirectories[0] == "")
                return true;
            foreach (string item in multipleDirectories)
            {
                if (item[0] == compareTo)
                    return false;
            }
            return true;
        }


        /*
        * Event handler for clicking the Move Files Button.
        * Contains all the necessary code to move the files. It will abandon the process if a problem is encountered.
        */
        private void MoveFilesBT_Click(object sender, EventArgs e)
        {
            // Lock controls so it's obvious that the program is currently functioning.
            LockControls();
            if (selectReportTB.Text == "" || !File.Exists(selectReportTB.Text))
            {
                MessageBox.Show("Please specify a valid location for the report!", "Report Location Invalid");
                UnlockControls();
                return;
            }
            if (selectDestinationTB.Text == "" || !Directory.Exists(selectDestinationTB.Text))
            {
                MessageBox.Show("Please specify a destination for the files!", "Destination Location Invalid");
                UnlockControls();
                return;
            }

            string[] multipleDirectories = ignoreDirectoryCB.Text.ToUpper().Replace(" ", "").Split(",");
            // Select a single or no drive letters.
            if ((ignoreDirectoryCB.Text == "N/A" || ignoreDirectoryCB.Text == "") || (ignoreDirectoryCB.Text.Length == 1 && (int)ignoreDirectoryCB.Text[0] >= 65 && (int)ignoreDirectoryCB.Text[0] <= 90))
            {
                // Do Nothing
            }
            // Select multiple drive letters.
            else if (ignoreDirectoryCB.Text.Length > 1)
            {
                // multipleDirectories = ignoreDirectoryCB.Text.ToUpper().Split(",");
                foreach (string item in multipleDirectories){
                    if (((int)item[0] < 65 || (int)item[0] > 90) || item.Length > 1)
                    {
                        MessageBox.Show(string.Format("\"{0}\" is not a drive letter", item), "Drive Does Not Exist");
                        UnlockControls();
                        return;
                    }
                }
            }
            // Invalid entry.
            else
            {
                MessageBox.Show(string.Format("\"{0}\" is an invalid drive letter", ignoreDirectoryCB.Text), "Drive Does Not Exist");
                UnlockControls();
                return;
            }

            List<string> sourceFiles = new();
            StreamReader fileReader = new StreamReader(selectReportTB.Text);
            string searchKey = "Collected source files:";
            string currentLine = "";
            bool addItemsToList = false;
            bool foundStopString = false;
            // Check every single line of the file.
            // When the line is the specific header of the section start attempting to save each line after to a list.
            // When attempting to add an item to the list, see if it exists first and then see if it's from an ignored drive letter.
            while (fileReader.Peek() > -1)
            {
                currentLine = fileReader.ReadLine().Trim();
                if (currentLine == "")
                    continue;
                else if (currentLine == "Rendering plug-ins:")
                {
                    foundStopString = true;
                    break;
                }
                if (addItemsToList && File.Exists(currentLine))
                {
                    if (EvaluateFile(currentLine[0], multipleDirectories))
                        sourceFiles.Add(currentLine);
                }
                if (currentLine == searchKey)
                {
                    addItemsToList = true;
                }
                Console.WriteLine(currentLine);
            }

            if (addItemsToList == false || foundStopString == false)
            {
                MessageBox.Show("Text file was not of expected format", "Abandoned Process");
                UnlockControls();
                return;
            }
            if (sourceFiles.Count == 0)
            {
                MessageBox.Show("There was nothing to move", "Abandoned Process");
                UnlockControls();
                return;
            }
            fileReader.Close();
            string newFileName = "";
            string[] splitItem;
            int progressPercentage = 0;
            int itemsPartOfOneHundred = 100/sourceFiles.Count;
            progressPB.Visible = true;
            // Move each file to the new destination.
            foreach (string item in sourceFiles)
            {
                splitItem = item.Split("\\");
                newFileName = selectDestinationTB.Text + "\\" + splitItem[splitItem.Length-1];
                if (File.Exists(newFileName))
                {
                    MessageBox.Show(String.Format("\"{0}\" already exists at \"{1}\"", splitItem[splitItem.Length - 1].ToString(), selectDestinationTB.Text), "File already exists at destination");
                }
                else
                    File.Move(item, newFileName);
                progressPercentage += itemsPartOfOneHundred;
                progressPB.Value = progressPercentage;
            }
            // Tell the user the process is finished successfully.
            progressPB.Value = 100;
            MessageBox.Show(String.Format("{0} items were moved to \"{1}\"", sourceFiles.Count, selectDestinationTB.Text), "Process Complete");
            progressPB.Visible = false;
            UnlockControls();
        }
    }
}